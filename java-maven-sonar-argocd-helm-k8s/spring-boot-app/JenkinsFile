/*
Install docker in jenkins plugins or use --user root -v as args in docker agent
*/
pipeline {
  agent any
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'

      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'

        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
//     stage('Static Code Analysis') {
//       environment {
//         SONAR_URL = "http://192.168.2.11:9000"
//       }
//       steps {
//         sh 'echo SONAR_AUTH_TOKEN : $SONAR_AUTH_TOKEN'
//         withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
//           sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.token=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
//          // sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
//         }
//       }
//     }
//     stage('Build and Push Docker Image') {
//       environment {
//         DOCKER_IMAGE = "sulaynd/ultimate-cicd:${BUILD_NUMBER}"
//         // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
//         REGISTRY_CREDENTIALS = credentials('docker-cred')
//       }
//       steps {
//         script {
//             sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
//              def dockerImage = docker.image("${DOCKER_IMAGE}")
//              docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
//                  dockerImage.push()
//              }
//         }
//       }
//     }

        stage('Trigger ManifestUpdate') {
        steps {
               echo "triggering spring boot manifest job"
               build job: "spring-boot-manifest", parameters: [string(name: 'DOCKERTAG', value: env.BUILD_NUMBER)]
        }
        }

//     stage('Update Deployment File') {
//         environment {
//             GIT_REPO_NAME = "spring-boot-app-manifests.git"
//             GIT_USER_NAME = "sulaynd"
//         }
//         steps {
//             //withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')])
//
//             withCredentials([usernamePassword(credentialsId: 'github', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]){
//                 sh '''
//                     git config user.email "sulaynd@gmail.com"
//                     git config user.name "souleye NDIAYE"
//                     BUILD_NUMBER=${BUILD_NUMBER}
//                     GIT_USERNAME=${GIT_USERNAME}
//                     GIT_PASSWORD=${GIT_PASSWORD}
//                     sed -i "" "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
//                     cat spring-boot-app-manifests/deployment.yml
//                     git add spring-boot-app-manifests/deployment.yml
//                     git commit -m "Update deployment image to version ${BUILD_NUMBER}"
//                     git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${GIT_USERNAME}/${GIT_REPO_NAME} HEAD:main
//                 '''
//                 //   git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
//
//             }
//         }
//     }
   } //stages
}
